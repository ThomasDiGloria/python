# -*- coding: utf-8 -*-
"""Copia di 07_verifica_ereditariet√†_ns_negozio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xC5VUKGzb0V4hBQwvUfFd_76H12tf2dG

"""
#!!!!!FILE ESEGUITO SENZA USO DI RISORSE!!!!!
class Articolo:
  def __init__(self, codice, fornitore, marca,prezzo, quantita):
    #1 Implementa il costruttore
    self.codice = codice
    self.fornitore = fornitore
    self.marca = marca
    self.prezzo = prezzo
    self.quantita = quantita

  def scheda_articolo(self):
    scheda = f"Codice articolo: {self.codice};\nFornitore: {self.fornitore};\nMarca: {self.marca};\nPrezzo: {self.prezzo};\nQuantita: {self.quantita}\n"
    return scheda

  def modifica_scheda(self):
    #NON ESEGUO LA MODIFICA DEL CODICE PERCHE' IL CODICE DEVE RIMANERE LO STESSO EVITANDO PROBLEMATICHE
    valore =input("Inserisci cosa vuoi modificare:\n1.fornitore,\n2.marca,\n3.prezzo,\n4.quantita\n")
    match valore:
        case "1":
            self.marca = input("Inserisci il nuovo fornitore: ")
        case "2":
            self.modello = input("Inserisci la nuova marca: ")
        case "3":
            self.prezzo = int(input("Inserisci il nuovo prezzo: "))
        case "4":
            self.annoRevisione = input("Inserisci la nuova quantita: ")
#Articolo finita a 9.26

class Televisore(Articolo):
    def __init__(self, codice, fornitore,marca,prezzo,quantita,pollici,tipo):
      #4 Implementa il costruttore
      super().__init__(codice, fornitore,marca,prezzo,quantita)
      self.pollici = pollici
      self.tipo = tipo

    def scheda_articolo(self):
      #5 Ritorna una stringa contenente gli attributi del televisore
      scheda = f"Pollici: {self.pollici};\nTipo: {self.tipo};\n"
      return super().scheda_articolo() + scheda
#Televisore finito a 9.30

class Frigorifero(Articolo):
  def __init__(self, codice, fornitore, marca, prezzo, quantita,dimensioni,modello):
    #6 Implementa il costruttore
    super().__init__(codice, fornitore,marca,prezzo,quantita)
    self.dimensioni = dimensioni
    self.modello = modello

  def scheda_articolo(self):
    #7 Ritorna una stringa contenente gli attributi del frigorifero
    scheda = f"Dimensioni: {self.dimensioni};\nModello: {self.modello}\n"
    return super().scheda_articolo() + scheda
#Frigorifero finito a 9.37

t1 = Televisore(1,"Fornitore 1","Sony",700,10,40,"Schermo piatto")
print(t1.scheda_articolo())

t1.modifica_scheda()
print(t1.scheda_articolo())

class Ordine():
  def __init__(self,codice,data, pIva,indirizzo):
    #8 Implementa il costruttore
    self.codice = codice
    self.data = data
    self.pIva = pIva
    self.indirizzo = indirizzo
    self.articoli = []

  def aggiungi_articolo(self,articolo):
    if isinstance(articolo,Televisore):
      tipo_articolo="televisore"
      self.articoli.append(articolo)
      print(f"{tipo_articolo} aggiunto alla lista ")
      
    elif isinstance(articolo,Frigorifero):
      tipo_articolo="frigorifero"
      self.articoli.append(articolo)
      print(f"{tipo_articolo} aggiunto alla lista ")
    #9 Completa il metodo aggiungendo l'oggetto alla lista e stampando il messaggio opportuno
    

  def rimuovi_articolo(self,articolo):
    #10 Implementa il metodo
    contr = 0
    if isinstance(articolo,Televisore):
      tipo_articolo="televisore"
      for televisore in self.articoli:
        if televisore.codice == articolo.codice:
          self.articoli.remove(articolo)
          contr += 1

    elif isinstance(articolo,Frigorifero):
      tipo_articolo="frigorifero"
      for frigorifero in self.articoli:
        if frigorifero.codice == articolo.codice:
          self.articoli.remove(articolo)
          contr += 1
    if contr == 0:
      print("Articolo non trovato")
    else:
      print(f"{tipo_articolo} eliminato con successo! ")

  def importo_ordine(self):
    #11 Stampa il numero di articoli e per ogni articolo l'importo (prezzo*quantita)
    importo = 0
    nArticoli = len(self.articoli)
    print(f"Per quanto riguarda l'ordine {self.codice} sono stati venduti {nArticoli} articoli")
    
    for articolo in self.articoli:
        importo = articolo.prezzo * articolo.quantita
        if isinstance(articolo,Televisore):
          print(f"Il televisore {articolo.codice} ha un importo uguale a: {importo}")
        if isinstance(articolo,Frigorifero):
          print(f"Il frigorifero {articolo.codice} ha un importo uguale a: {importo}")
    return importo
  
  def dettaglio_ordine(self):
    #12 Stampa i dettagli dell'ordine e restituisce una lista contenente
    # [somma importi televisori, somma importi frigoriferi, somma importi totali ]
    #...
    sommaT = 0
    sommaF = 0
    for articolo in self.articoli:
      importo = articolo.prezzo * articolo.quantita
      if isinstance(articolo,Televisore):
        sommaT += importo
      if isinstance(articolo,Frigorifero):
        sommaF += importo
      print(articolo.scheda_articolo())
    return([sommaT,sommaF,sommaT+sommaF])

t2 = Televisore(2,"Fornitore 2","Samsung",1000,5,80,"Schermo curvo")
f1 = Frigorifero(3,"Fornitore 3","Bosch",750,12,'790x2000x600','Ultra')
f2 = Frigorifero(4,"Fornitore 4","Ariston",550,10,'590x1600x500','Medium')

ordine1=Ordine(1,"24/02/2022",'213143','Via della consegna 1')
ordine1.aggiungi_articolo(t1)
ordine1.aggiungi_articolo(t2)
ordine1.aggiungi_articolo(f1)
ordine1.aggiungi_articolo(f2)

ordine1.rimuovi_articolo(f2)
ordine1.rimuovi_articolo(f2)

#13 Risposta al Punto 1 : Per un ordine: il numero di articoli presenti e
# l'importo totale senza distinguere il tipo di articolo

ordine1.importo_ordine()

#14 Risposta punto 2.   Per un ordine: il dettaglio degli articoli, l'importo totale,
# l'importo dei televisori e l'importo dei frigoriferi.
importi=ordine1.dettaglio_ordine()
print("--------------------------")
print(f"\nImporto televisori= {importi[0]}")
print(f"\nImporto frigoriferi= {importi[1]}")
print(f"\nImporto totale= {importi[2]}")
#ORDINE concluso a 10.18

class Ordini():
  def __init__(self,nome_negozio,codice_negozio):
    #16 Implementa il costruttore
    self.nome_negozio = nome_negozio
    self.codice_negozio = codice_negozio
    self.ordini = []

  def aggiungi_ordine(self,ordine):
    #17 Implementa il metodo
    self.ordini.append(ordine)
    print(f"Ordine {ordine.codice} aggiunto con successo")

  def rimuovi_ordine(self,ordine):
    #18 Implementa il metodo
    controllo = 0
    for ordineL in self.ordini:
      if ordineL.codice == ordine.codice:
        self.ordini.remove(ordine)
        print(f"Ordine {ordine.codice} eliminato con successo! ")
        controllo += 1
    if controllo == 0:
      print(f"Ordine non trovato! ")

  #non va esattamente
  def totale_ordini(self):
    #19 Implementa il metodo
    #...
    totT = 0
    totF = 0
    tot = 0
    for ordine in self.ordini:
      for articolo in ordine.articoli:
        if isinstance(articolo,Televisore):
          #totT += ordine.importo_ordine()
          importi = ordine.dettaglio_ordine()
          totT += importi[0]
          print(totT)
        elif isinstance(articolo,Frigorifero):
          importi = ordine.dettaglio_ordine()
          print(totF)
          totF += importi[1]
          #totF += ordine.importo_ordine()
    tot = totT + totF
    return ([totT,totF,tot])

ordini_negozio=Ordini("Megastore vendita ",1)
ordini_negozio.aggiungi_ordine(ordine1)
ordini_negozio.rimuovi_ordine(ordine1)
ordini_negozio.rimuovi_ordine(ordine1)

ordini_negozio.aggiungi_ordine(ordine1)

t3 = Televisore(5,"Fornitore 5","LG",600,4,70,"Schermo curvo")
f3 = Frigorifero(6,"Fornitore 6","Bosch",450,10,'490x1000x400','Small')
ordine2=Ordine(2,"25/02/2022",'213113','Via della consegna 2')
ordine2.aggiungi_articolo(t3)
ordine2.aggiungi_articolo(f3)

ordini_negozio.aggiungi_ordine(ordine2)

# 20 Riposta punto 3: Per tutti gli ordini del negozio mostra
# il dettaglio degli articoli, l'importo totale,
# l'importo dei televisori e l'importo dei frigoriferi.
importiTotali=ordini_negozio.totale_ordini()
print("--------------------------")
print(f"\nImporto totale televisori= {importiTotali[0]}")
print(f"\nImporto totale frigoriferi= {importiTotali[1]}")
print(f"\nImporto totale tutti gli ordini= {importiTotali[2]}")