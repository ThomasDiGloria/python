# -*- coding: utf-8 -*-
"""07_verifica_ereditarietà_recupero_testo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NXSHuPYmc-POfQQES_OGyAhLs0eFQXUO

# Gestione concessionaria multimarche per la vendita di automobili e moto usate


Una concessionaria multimarche che vende veicoli esclusivamente Automobili e Moto vuole gestire in modo automatizzato la contabilità della propria attività.

La concessionaria vuole gestire le diverse vendite che vengono effettuate periodicamente.

Le vendite giornaliere sono composte da una lista di veicoli che possono riguardare quantitativi di automobili e motocicli differenti (es. 3 automobili, 2 motocicli).

Gli addetti alle vendite della concessionaria vogliono poter conoscere:

1.   Per un vendita giornaliera : il numero di veicoli venduti e l'importo totale senza distinguere il tipo di veicolo
2.   Per un ogni vendita giornaliera : il dettaglio dei veicoli, l'incasso totale, l'incasso totale per tipologia di veicolo (automobili  e motocicli)
3.   Per tutti gli ordini del negozio il dettaglio degli veicoli, l'importo totale, l'importo delle automobili e l'importo dei motocicli.  



```
# Definire una classe base Veicolo (dalla quale derivare le classi Automobile, Motocicli)
Definire una classe Vendita, che conterrà gli oggetti di tipo Automobile, Motocicli
Definire una classe Vendite, che conterrà gli oggetti di tipo Vendita.
Implementare i diversi metodi indicati
```
"""

class Veicolo:
  def __init__(self, codice, marca, modello,prezzo, annoRevisione):
    #costruttore
    self.codice = codice
    self.marca = marca
    self.modello = modello
    self.prezzo = prezzo
    self.annoRevisione = annoRevisione
    
  def scheda_veicolo(self):
    #scheda
    scheda = f"Codice veicolo: {self.codice};\nMarca: {self.marca};\nModello: {self.modello};\nPrezzo: {self.prezzo};\nAnno: {self.annoRevisione}"
    return scheda

  def modifica_scheda(self):
    #modifica
    valore =input("Inserisci cosa vuoi modificare:\n1.marca,\n2.modello,\n3.prezzo,\n4.anno\n")
    match valore:
        case "1":
            self.marca = input("Inserisci la nuova marca: ")
        case "2":
            self.modello = input("Inserisci il nuovo modello: ")
        case "3":
            self.prezzo = int(input("Inserisci il nuovo prezzo: "))
        case "4":
            self.annoRevisione = input("Inserisci il nuovo anno: ")

class Automobile(Veicolo):
    def __init__(self, codice, marca, modello,prezzo, annoRevisione,lunghezza,larghezza):
      super().__init__(codice, marca, modello, prezzo, annoRevisione)
      self.lunghezza = lunghezza
      self.larghezza = larghezza
      #4 Implementa il costruttore

    def scheda_veicolo(self):
      scheda = f"\nLunghezza: {self.lunghezza};\nLarghezza: {self.larghezza};"
      return super().scheda_veicolo() + scheda
      #5 Ritorna una stringa contenente gli attributi dell'automobile
      
      
class Motociclo(Veicolo):
  def __init__(self, codice, marca, modello,prezzo, annoRevisione,tipo,potenza):
    super().__init__(codice, marca, modello, prezzo, annoRevisione)
    self.tipo = tipo
    self.potenza = potenza
    #6 Implementa il costruttore

  def scheda_veicolo(self):
    scheda = f"\nTipo: {self.tipo};\nPotenza: {self.potenza};"
    return super().scheda_veicolo() + scheda
    #7 Ritorna una stringa contenente gli attributi del motociclo

a1 = Automobile(1,"Audi","Audi Q3",25000,2015,4.5,1.85)
print(a1.scheda_veicolo())
a1.modifica_scheda()
print(a1.scheda_veicolo())

m1 = Motociclo(3,"Gilera","Gilera Runner 50",3500,2016,"Scooter",1200)
m1.modifica_scheda()
print(m1.scheda_veicolo())

class Vendita():
  def __init__(self, codice, data, codiceVenditore):
    self.codice = codice
    self.data = data
    self.codiceVenditore = codiceVenditore
    self.automobili = []
    self.motocicli = []
    #8 Implementa il costruttore


  def aggiungi_veicolo(self,veicolo):
    if isinstance(veicolo,Automobile):
      tipo_veicolo="automobile"
      self.automobili.append(veicolo)

    elif isinstance(veicolo,Motociclo):
      tipo_veicolo="motociclo"
      self.motocicli.append(veicolo)
    print(f"{tipo_veicolo} inserito/a nella lista delle vendite!")
    #9 Completa il metodo aggiungendo l'oggetto alla lista e stampando il messaggio opportuno


  def rimuovi_veicolo(self,veicolo):
    #10 Implementa il metodo
    contr = 0
    for auto in self.automobili:
      if veicolo.codice == auto.codice:
        self.automobili.remove(veicolo)
        print("Veicolo eliminato")
        contr += 1
        
    for moto in self.motocicli:
      if veicolo.codice == moto.codice:
        self.motocicli.remove(veicolo)
        print("Veicolo eliminato")
        contr += 1
        
    if contr == 0:
        print("Veicolo non trovato")    

  def importo_vendita(self):
    vendita_tot = 0
    for auto in self.automobili:
      vendita_tot += + auto.prezzo
    for moto in self.motocicli:
      vendita_tot += moto.prezzo
    numero_veicoli = len(self.automobili) + len(self.motocicli)
    
    print(f"Numero di veicoli venduti in data {self.data}: {numero_veicoli}\nVendita totale: {vendita_tot}")
    #11 Stampa il numero di veicoli e l'importo totale della vendita giornaliera
    


  def dettaglio_vendita(self):
    sommaA = 0
    sommaM = 0
    provvigioneA = 0
    provvigioneM = 0
    for auto in self.automobili:
      sommaA += auto.prezzo
    for moto in self.motocicli:
      sommaM += moto.prezzo
    provvigioneA = (sommaA * 3) / 100
    provvigioneM = (sommaM * 2) / 100
    provvigione = provvigioneA + provvigioneM
    
    #12 Stampa il dettaglio della vendita e restituisce una lista contenente
    # [somma importi automobili, somma importi motocicli, somma importi totali, provvigione ]
    # e il totale della provvigione spettante al venditore sapendo che:
    # per automobili la provvigione spettante è il 3% del prezzo di vendita
    # per motocicli la provvigione spettante è il 2% del prezzo di vendita
    #...
    
    return([sommaA,sommaM,sommaA+sommaM,provvigione])

a2 = Automobile(2,"Peugeot","Peugeot 2008",18000,2014,4.2,1.75)
m1 = Motociclo(3,"Gilera","Gilera Runner 50",3500,2016,"Scooter",1200)
m2 = Motociclo(4,"Honda","SW-T 400 – 2013",4500,2012,"Super Sport",1000)

vendita1=Vendita(1,"01/04/2022",'123')
vendita1.aggiungi_veicolo(a1)
vendita1.aggiungi_veicolo(a2)
vendita1.aggiungi_veicolo(m1)
vendita1.aggiungi_veicolo(m2)

vendita1.rimuovi_veicolo(m2)
vendita1.rimuovi_veicolo(m2)

#13 Risposta al Punto 1 : Per una vendita: 'importo totale senza distinguere il tipo di veicolo

vendita1.importo_vendita()

#14 Risposta punto 2.   Per una ogni vendita: l'importo totale,
# l'importo delle automobili, l'importo dei motocicli e il totale della provvigione.
importi=vendita1.dettaglio_vendita()
print("--------------------------")
print(f"\nImporto Automobili= {importi[0]}")
print(f"\nImporto Motocicli= {importi[1]}")
print(f"\nImporto Totale= {importi[2]}")
print(f"\nImporto Provvigione= {importi[3]}")

class Vendite():
  def __init__(self,nome_negozio,codice_negozio):
    self.nome = nome_negozio
    self.codice_negozio = codice_negozio
    self.vendite = []
    #16 Implementa il costruttore

  def aggiungi_vendita(self,vendita):
    #17 Implementa il metodo
    self.vendite.append(vendita)

  def rimuovi_vendita(self,vendita):
    #18 Implementa il metodo
    contr = 0
    for venditeN in self.vendite:
      if venditeN == vendita:
        self.vendite.remove(vendita)
        print("Vendita eliminata")
        contr = contr + 1
      else:
        print("Vendita non trovata")
    if contr == 0:
      print("Vendita non trovata")
        

  def totale_vendite(self):
    #19 Implementa il metodo
    totA = 0
    totM = 0
    tot = 0
    for vendita in self.vendite:
      importi=vendita.dettaglio_vendita()
      totA += importi[0]
      totM += importi[1]
      tot = totA + totM

    return ([totA,totM,tot])

vendite_negozio=Vendite("Concessionaria Magenta ",1)
vendite_negozio.aggiungi_vendita(vendita1)
vendite_negozio.rimuovi_vendita(vendita1)
vendite_negozio.rimuovi_vendita(vendita1)

vendite_negozio.aggiungi_vendita(vendita1)

a3 = Automobile(5,"Renault","Renault Clio",12000,2020,3.2,1.55)
m3 =  Motociclo(6,"Honda","SW-T 500",5500,2021,"Sport",1200)

vendita2=Vendita(2,"2/04/2022",'234')
vendita2.aggiungi_veicolo(a3)
vendita2.aggiungi_veicolo(m3)

vendite_negozio.aggiungi_vendita(vendita2)

# 20 Riposta punto 3: Per tutti le vendite della concessionaria mostra
# il dettaglio dei veicoli, l'importo totale,
# l'importo delle automobili e l'importo dei motocicli.
importiTotali=vendite_negozio.totale_vendite()
print("--------------------------")
print(f"\nImporto totale automobili= {importiTotali[0]}")
print(f"\nImporto totale motocilci= {importiTotali[1]}")
print(f"\nImporto totale di tutte le vendite= {importiTotali[2]}")