# -*- coding: utf-8 -*-
"""07_verifica_ereditarietà_recupero_testo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NXSHuPYmc-POfQQES_OGyAhLs0eFQXUO

# Gestione concessionaria multimarche per la vendita di automobili e moto usate


Una concessionaria multimarche che vende veicoli esclusivamente Automobili e Moto vuole gestire in modo automatizzato la contabilità della propria attività.

La concessionaria vuole gestire le diverse vendite che vengono effettuate periodicamente.

Le vendite giornaliere sono composte da una lista di veicoli che possono riguardare quantitativi di automobili e motocicli differenti (es. 3 automobili, 2 motocicli).

Gli addetti alle vendite della concessionaria vogliono poter conoscere:

1.   Per un vendita giornaliera : il numero di veicoli venduti e l'importo totale senza distinguere il tipo di veicolo
2.   Per un ogni vendita giornaliera : il dettaglio dei veicoli, l'incasso totale, l'incasso totale per tipologia di veicolo (automobili  e motocicli)
3.   Per tutti gli ordini del negozio il dettaglio degli veicoli, l'importo totale, l'importo delle automobili e l'importo dei motocicli.  



```
# Definire una classe base Veicolo (dalla quale derivare le classi Automobile, Motocicli)
Definire una classe Vendita, che conterrà gli oggetti di tipo Automobile, Motocicli
Definire una classe Vendite, che conterrà gli oggetti di tipo Vendita.
Implementare i diversi metodi indicati
```
"""

class Veicolo:
  def __init__(self, codice, marca, modello,prezzo, annoRevisione):
    self.codice = codice
    self.marca = marca
    self.modello = modello
    self.prezzo = prezzo
    self.annoRevisione = annoRevisione
    
  def scheda_veicolo(self):
    return f"Codice: {self.codice}\nMarca: {self.marca}\nModello: {self.modello}\nPrezzo: {self.prezzo}\nanno di revisione: {self.annoRevisione}\n"

  def modifica_scheda(self):
     valore =input("Inserisci cosa vuoi modificare:\n1.codice,\n2.marca,\n3.modello,\n4.prezzo,\n5.annoRevisione,\n")
     match valore:
       case "1":
         self.nome = input("Inserisci il nuovo nome: ")
       case "2":
         self.marca = input("Inserisci la nuova marca: ")
       case "3":
         self.modello = input("Inserisci il nuovo modello: ")
       case "4":
         self.prezzo = input("Inserisci il nuovo prezzo: ")
       case "5":
         self.annoRevisione = input("Inserisci il nuovo anno di revisione: ")

class Automobile(Veicolo):
    def __init__(self, codice, marca, modello,prezzo, annoRevisione):
      super().__init__(codice, marca, modello,prezzo, annoRevisione)

    def __init__(self, codice, marca, modello,prezzo, annoRevisione,lunghezza,larghezza):
      super().__init__(codice, marca, modello,prezzo, annoRevisione)
      self.lunghezza = lunghezza
      self.larghezza = larghezza

    def scheda_veicolo(self):
      scheda = f"lunghezza: {self.lunghezza}\nlarghezza: {self.larghezza}\n"
      return super().scheda_veicolo() + scheda

class Motociclo(Veicolo):
  def __init__(self, codice, marca, modello,prezzo, annoRevisione):
    super().__init__(codice, marca, modello,prezzo, annoRevisione)
    
  def __init__(self, codice, marca, modello,prezzo, annoRevisione, tipo, potenza):
    super().__init__(codice, marca, modello,prezzo, annoRevisione)
    self.tipo = tipo
    self.potenza = potenza

  def scheda_veicolo(self):
    scheda = f"tipo: {self.tipo}\npotenza: {self.potenza}"
    return super().scheda_veicolo + scheda
    
a1 = Automobile(1,"Audi","Audi Q3",25000,2015,4.5,1.85)
print(a1.scheda_veicolo())

a1.modifica_scheda()
print(a1.scheda_veicolo())

class Vendita():
  def __init__(self,codice,data, codiceVenditore):
    self.codice = codice
    self.data = data
    self.codiceVenditore = codiceVenditore

  def aggiungi_veicolo(self,veicolo):
    if isinstance(veicolo,Automobile):
      tipo_veicolo="automobile"

    elif isinstance(veicolo,Motociclo):
      tipo_veicolo="motociclo"
    #9 Completa il metodo aggiungendo l'oggetto alla lista e stampando il messaggio opportuno


  def rimuovi_veicolo(self,veicolo):
    #10 Implementa il metodo
    pass




  def importo_vendita(self):
    #11 Stampa il numero di veicoli e l'importo totale della vendita giornaliera
    pass


  def dettaglio_vendita(self):
    #12 Stampa il dettaglio della vendita e restituisce una lista contenente
    # [somma importi automobili, somma importi motocicli, somma importi totali, provvigione ]
    # e il totale della provvigione spettante al venditore sapendo che:
    # per automobili la provvigione spettante è il 3% del prezzo di vendita
    # per motocicli la provvigione spettante è il 2% del prezzo di vendita
    #...
    pass




    #return([sommaA,sommaM,sommaA+sommaM,provvigione])

a2 = Automobile(2,"Peugeot","Peugeot 2008",18000,2014,4.2,1.75)
m1 = Motociclo(3,"Gilera","Gilera Runner 50",3500,2016,"Scooter",1200)
m2 = Motociclo(4,"Honda","SW-T 400 – 2013",4500,2012,"Super Sport",1000)

vendita1=Vendita(1,"01/04/2022",'123')
vendita1.aggiungi_veicolo(a1)
vendita1.aggiungi_veicolo(a2)
vendita1.aggiungi_veicolo(m1)
vendita1.aggiungi_veicolo(m2)

vendita1.rimuovi_veicolo(m2)
vendita1.rimuovi_veicolo(m2)

#13 Risposta al Punto 1 : Per una vendita: 'importo totale senza distinguere il tipo di veicolo

vendita1.importo_vendita()

#14 Risposta punto 2.   Per una ogni vendita: l'importo totale,
# l'importo delle automobili, l'importo dei motocicli e il totale della provvigione.
""" DA FARE
importi=vendita1.dettaglio_vendita()
print("--------------------------")
print(f"\nImporto Automobili= {importi[0]}")
print(f"\nImporto Motocicli= {importi[1]}")
print(f"\nImporto Totale= {importi[2]}")
print(f"\nImporto Provvigione= {importi[3]}")
"""
class Vendite():
  def __init__(self,nome_negozio,codice_negozio):
    #16 Implementa il costruttore
    pass

  def aggiungi_vendita(self,vendita):
    #17 Implementa il metodo
    pass

  def rimuovi_vendita(self,vendita):
    #18 Implementa il metodo
    pass

  def totale_vendite(self):
    #19 Implementa il metodo
    #...
    pass


    #return ([totA,totM,tot])

vendite_negozio=Vendite("Concessionaria Magenta ",1)
vendite_negozio.aggiungi_vendita(vendita1)
vendite_negozio.rimuovi_vendita(vendita1)
vendite_negozio.rimuovi_vendita(vendita1)

vendite_negozio.aggiungi_vendita(vendita1)

a3 = Automobile(5,"Renault","Renault Clio",12000,2020,3.2,1.55)

m3 =  Motociclo(6,"Honda","SW-T 500",5500,2021,"Sport",1200)
vendita2=Vendita(2,"2/04/2022",'234')
vendita2.aggiungi_veicolo(a3)
vendita2.aggiungi_veicolo(m3)

vendite_negozio.aggiungi_vendita(vendita2)

# 20 Riposta punto 3: Per tutti le vendite della concessionaria mostra
# il dettaglio dei veicoli, l'importo totale,
# l'importo delle automobili e l'importo dei motocicli.
""" DA FARE
importiTotali=vendite_negozio.totale_vendite()
print("--------------------------")
print(f"\nImporto totale automobili= {importiTotali[0]}")
print(f"\nImporto totale motocilci= {importiTotali[1]}")
print(f"\nImporto totale di tutte le vendite= {importiTotali[2]}")
"""